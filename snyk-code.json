{"$schema": "https://docs.oasis-open.org/sarif/sarif/v2.1.0/errata01/os/schemas/sarif-schema-2.1.0.json","version": "2.1.0","runs": [{"tool": {"driver" : {"name" : "SnykCode","semanticVersion" : "1.1299.0","version" : "1.1299.0","informationUri" : "https://docs.snyk.io/","rules" : [{"id": "javascript/HardcodedNonCryptoSecret","name": "HardcodedNonCryptoSecret","shortDescription": {"text": "Hardcoded Secret"},"defaultConfiguration": {"level": "error"},"help": {"markdown": "## Details\n\nWhen constants are hardcoded into applications, this information could easily be reverse-engineered and become known to attackers. For example, if a breached authentication token is hardcoded in multiple places in the application, it may lead to components of the application remaining vulnerable if not all instances are changed.\nAnother negative effect of hard-coding constants is potential unpredictability in the application's performance if the development team fails to update every single instance of the hardcoded constant throughout the code. For these reasons, hard-coding security-relevant constants is considered bad coding practice and should be remedied if present and avoided in future.\n\n## Best practices for prevention\n- Never hard code security-related constants; use symbolic names or configuration lookup files.\n- As hard coding is often done by coders working alone on a small scale, examine all legacy code components and test carefully when scaling.\n- Adopt a \"future-proof code\" mindset: While use of constants may save a little time now and make development simpler in the short term, it could cost time and money adapting to scale or other unforeseen circumstances (such as new hardware) in the future.","text": ""},"properties": {"tags": ["javascript","HardcodedNonCryptoSecret","Security"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/markstock7/FileManager/commit/50572778825dea6b6fdb34c9ae950d9915743e4c?diff=split#diff-408990876524f4737b49693cedc52fd267e31f665d0a7f71792dcb986d6a8268L-1","lines": [{"line": "accessKeyId: 'pT3KujnBPxc0ey7G',\n","lineNumber": 1,"lineChange": "removed"},{"line": "secretAccessKey: 'CcHjh2y7tIFljxgUT4U8sQLctkMBHu',\n","lineNumber": 2,"lineChange": "removed"},{"line": "accessKeyId: '',\n","lineNumber": 1,"lineChange": "added"},{"line": "secretAccessKey: '',\n","lineNumber": 2,"lineChange": "added"}]},{"commitURL": "https://github.com/leohmoraes/rocketseat-02/commit/69e888ed7c779a0fbb0d0c08a219afa11b3913bd?diff=split#diff-04122576a4101a4ed68c79faa4f4605c44d8fd93252cff9e64ba66ab9c561e86L-1","lines": [{"line": "secret: '9dffij39asf23nsfnsvsdsa',\n","lineNumber": 1,"lineChange": "removed"},{"line": "secret: process.env.APP_SECRET,\n","lineNumber": 1,"lineChange": "added"}]},{"commitURL": "https://github.com/rodrigotamura/go-stack-2019/commit/26e020dfc2272fe76c82c28d86f492c3c84a94c5?diff=split#diff-92f76c0bccc1f970244da3b50449f200d4787cf60a87be14ff4f250d0ba1a590L-1","lines": [{"line": "secret: '632ca4dfc8b2269e6fdf03ab5a55d2ec',\n","lineNumber": 1,"lineChange": "removed"},{"line": "secret: process.env.APP_SECRET,\n","lineNumber": 1,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 100,"cwe": ["CWE-547"]}},{"id": "javascript/HttpToHttps","name": "HttpToHttps","shortDescription": {"text": "Cleartext Transmission of Sensitive Information"},"defaultConfiguration": {"level": "warning"},"help": {"markdown": "\n## Details\nThis weakness occurs when software transmits sensitive information, such as passwords or credit card numbers, in unencrypted form. This information may then be intercepted by threat actors using sniffer tools or interception techniques such as man-in-the-middle (MITM) attacks (often involving social engineering). Attackers can then use information gleaned to perform a variety of actions, depending on the information type. Possible actions include gaining unauthorized access, impersonating a user, moving laterally within the organization's network, or retrieving and potentially modifying files. This weakness is almost completely avoidable through intelligent architecture and design.\n\n## Best practices for prevention\n* Build web applications around a security mindset and the awareness that sniffers may be present at any time.\n* Ensure that all sensitive data transmission uses reliable encryption.\n* Implement security measures so that sensitive results are never returned in plain text.\n* Implement multiple-factor authentication methods to validate remote instances.\n* Use SSL not only at logon but throughout communications.","text": ""},"properties": {"tags": ["javascript","HttpToHttps","Security"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/REBELinBLUE/deployer/commit/bdb2c9750c497c9bc025580ce5bf5b8a6972de17?diff=split#diff-112ac233b1e3314b31d86e70dd54fd358cf3e246c38a63bf2e3085a47a0d6cf3L-1","lines": [{"line": "var redis = new Redis();\n","lineNumber": 9,"lineChange": "removed"},{"line": "var redis = new Redis({\n","lineNumber": 9,"lineChange": "added"},{"line": "    db: ENV.REDIS_DATBASE || 0\n","lineNumber": 10,"lineChange": "added"},{"line": "});\n","lineNumber": 11,"lineChange": "added"},{"line": "\n","lineNumber": 12,"lineChange": "added"},{"line": "if (!/^https/i.test(process.env.SOCKET_URL)) {\n","lineNumber": 13,"lineChange": "added"},{"line": "\n","lineNumber": 14,"lineChange": "added"},{"line": "    var ssl_conf = {\n","lineNumber": 15,"lineChange": "added"},{"line": "        key:  (process.env.SOCKET_SSL_KEY_FILE  ? fs.readFileSync(process.env.SOCKET_SSL_KEY_FILE)  : null),\n","lineNumber": 16,"lineChange": "added"},{"line": "        cert: (process.env.SOCKET_SSL_CERT_FILE ? fs.readFileSync(process.env.SOCKET_SSL_CERT_FILE) : null),\n","lineNumber": 17,"lineChange": "added"},{"line": "        ca:   (process.env.SOCKET_SSL_CA_FILE   ? fs.readFileSync(process.env.SOCKET_SSL_CA_FILE)   : null)\n","lineNumber": 18,"lineChange": "added"},{"line": "    };\n","lineNumber": 19,"lineChange": "added"},{"line": "\n","lineNumber": 20,"lineChange": "added"},{"line": "    var app = require('https').createServer(ssl_conf, handler);\n","lineNumber": 21,"lineChange": "added"},{"line": "} else {\n","lineNumber": 22,"lineChange": "added"},{"line": "    var app = require('http').createServer(handler);\n","lineNumber": 23,"lineChange": "added"},{"line": "}\n","lineNumber": 24,"lineChange": "added"}]},{"commitURL": "https://github.com/medic/couch2pg/commit/062eaa0f53d2cd2327232a695c60bf4c9fd589f6?diff=split#diff-e727e4bdf3657fd1d798edcd6b099d6e092f8573cba266154583a746bba0f346L-1","lines": [{"line": "var httplib = require('http');\n","lineNumber": 1,"lineChange": "removed"},{"line": "var httplib = require('https');\n","lineNumber": 1,"lineChange": "added"}]},{"commitURL": "https://github.com/Rich-Harris/packd/commit/c14d17da80ed075ee007de3121422fb2c5b77e4d?diff=split#diff-1821d11fbffbab2187701c42616688d46bf66d7b2cf6eaf363548dd66caa6ebaL-1","lines": [{"line": "const http = require( 'http' );\n","lineNumber": 0,"lineChange": "removed"},{"line": "const https = require( 'https' );\n","lineNumber": 0,"lineChange": "added"},{"line": "\n","lineNumber": 1,"lineChange": "none"},{"line": "module.exports = function get ( url ) {\n","lineNumber": 2,"lineChange": "none"},{"line": "\treturn new Promise( ( fulfil, reject ) => {\n","lineNumber": 3,"lineChange": "none"},{"line": "\t\thttp.get( url, response => {\n","lineNumber": 4,"lineChange": "removed"},{"line": "\t\thttps.get( url, response => {\n","lineNumber": 4,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 122,"cwe": ["CWE-319"]}},{"id": "javascript/InsecureCipherNoIntegrity","name": "InsecureCipherNoIntegrity","shortDescription": {"text": "Use of a Broken or Risky Cryptographic Algorithm"},"defaultConfiguration": {"level": "warning"},"help": {"markdown": "\n## Details\n\nWhen sensitive information is transmitted with weak encryption, attackers are potentially able to intercept the information and decrypt it, with a wide range of negative consequences. This includes accessing code or content they are not authorized to view and changing or taking down a site or app, often with a demand for ransom. Every developer is aware of the risks of transmitting sensitive information in plain text. Yet many still use outdated or inferior cryptographic methods to protect information under their control. As cryptographic methods grow stronger with time, code must be updated to incorporate more modern and secure cryptography.\n\n## Best practices for prevention\n* Avoid using DES, and use AES (in a secure mode, such as Galois/Counter Mode) or another strong encryption algorithm instead.\n* Be aware of outdated hashes, such as MD5 and SHA1 (along with many others); recognize and implement current cryptographic standards instead.\n* Never use custom or DIY security and cryptographic methods; instead, use methods that are part of an accepted library or framework.\n* Ensure that code dealing with cryptographic methods is highly modular and can be easily replaced as security standards change.\n* Increase developer awareness of proper encryption key management and protection to ensure best practices throughout the application.","text": ""},"properties": {"tags": ["javascript","InsecureCipherNoIntegrity","Security"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/itsKaynine/thailand-post/commit/80b30882327162ece012ffeb493b53776459386f?diff=split#diff-e727e4bdf3657fd1d798edcd6b099d6e092f8573cba266154583a746bba0f346L-1","lines": [{"line": "secureOptions: constants.SSL_OP_NO_TLSv1_2,\n","lineNumber": 15,"lineChange": "added"}]},{"commitURL": "https://github.com/how-to-firebase/secrets/commit/0b67af9ffdcf021cfd7bea51a8d98e1c3fe04222?diff=split#diff-22365fe28facbcc7a8562c3c7fbeea1d6936135e4f15e641097aa9c0aad8dd5fL-1","lines": [{"line": "const algorithm = 'aes-256-ctr';\r\n","lineNumber": 6,"lineChange": "removed"},{"line": "const algorithm = 'aes-256-gcm';\r\n","lineNumber": 6,"lineChange": "added"}]},{"commitURL": "https://github.com/postlight/lux/commit/c823ce4da284f06e3c789831c44fc20d14b1456b?diff=split#diff-6c8a6c3433c6524009b910da8b192e05a2999c55f5e36c1eeac35c341de29a67L-1","lines": [{"line": "export function generateSalt() {\n","lineNumber": 2,"lineChange": "removed"},{"line": "  return randomBytes(16).toString('hex');\n","lineNumber": 3,"lineChange": "removed"},{"line": "}\n","lineNumber": 4,"lineChange": "removed"},{"line": "\n","lineNumber": 5,"lineChange": "removed"},{"line": "export function encryptPassword(str, secret) {\n","lineNumber": 6,"lineChange": "removed"},{"line": "  let encrypted;\n","lineNumber": 7,"lineChange": "removed"},{"line": "  const cipher = createCipher('aes-256-ctr', secret);\n","lineNumber": 8,"lineChange": "removed"},{"line": "const saltRounds = 10;\n","lineNumber": 2,"lineChange": "added"},{"line": "\n","lineNumber": 9,"lineChange": "none"},{"line": "  encrypted = cipher.update(str, 'utf8', 'hex');\n","lineNumber": 10,"lineChange": "removed"},{"line": "  encrypted += cipher.final('hex');\n","lineNumber": 11,"lineChange": "removed"},{"line": "  return encrypted;\n","lineNumber": 12,"lineChange": "removed"},{"line": "export function hashPassword(password) {\n","lineNumber": 4,"lineChange": "added"},{"line": "  return hash(password, saltRounds);\n","lineNumber": 5,"lineChange": "added"},{"line": "}\n","lineNumber": 13,"lineChange": "none"},{"line": "\n","lineNumber": 14,"lineChange": "none"},{"line": "export function decryptPassword(hash, secret) {\n","lineNumber": 15,"lineChange": "removed"},{"line": "  let decrypted;\n","lineNumber": 16,"lineChange": "removed"},{"line": "  const decipher = createDecipher('aes-256-ctr', secret);\n","lineNumber": 17,"lineChange": "removed"},{"line": "\n","lineNumber": 18,"lineChange": "removed"},{"line": "  decrypted = decipher.update(hash, 'hex', 'utf8');\n","lineNumber": 19,"lineChange": "removed"},{"line": "  decrypted += decipher.final('utf8');\n","lineNumber": 20,"lineChange": "removed"},{"line": "  return decrypted;\n","lineNumber": 21,"lineChange": "removed"},{"line": "export function comparePassword(password, hash) {\n","lineNumber": 8,"lineChange": "added"},{"line": "  return compare(password, hash)\n","lineNumber": 9,"lineChange": "added"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 40,"cwe": ["CWE-327"]}},{"id": "javascript/NoRateLimitingForExpensiveWebOperation","name": "NoRateLimitingForExpensiveWebOperation","shortDescription": {"text": "Allocation of Resources Without Limits or Throttling"},"defaultConfiguration": {"level": "warning"},"help": {"markdown": "\n## Details\n\nWithout unlimited resources, software operating in the real world is inherently limited in the resources it may consume; similarly, servers are limited by the number of simultaneous sessions they can handle. Therefore, it is important for developers to design software that considers these real-world physical (or virtual) limitations and limits user sessions accordingly, both in terms of the number of user sessions and in the quantity of resources each user may demand. Software with this weakness does not include such limitations and as a result, individual user sessions may consume too many resources, leading to unintended software behavior including, potentially, denial of service. This can be compared to a single restaurant customer emptying out the entire buffet, leaving no food for other customers--or an entire busload mobbing the buffet all at once, with a similar effect. This may happen inadvertently or as a result of an attack by a malicious user.\n\n## Best practices for prevention\n* Test extensively to obtain baseline values indicating how the software performs in the real world under various conditions (normal and peak); use these values to determine reasonable software limits.\n* Set clear limits for all flexible parameters such as maximum allocable memory, number of processes within a given timeframe, file descriptors, requests per client, number of records per request, etc. This is particularly true for any parameters within user control.\n* Release all resources when no longer in use, including incorporating timeouts for inactive users, processes, and resources.\n* Familiarize Dev, Ops, and IT teams with best practices for recognizing and preventing DoS attacks and out-of-control resource allocation to prevent catastrophic failures.","text": ""},"properties": {"tags": ["javascript","NoRateLimitingForExpensiveWebOperation","Security"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/vmware/singleton/commit/cb488fd0cd75e7b1f122784bdaf5ee6a85cd5323?diff=split#diff-dd8084200629fa5980243a6f7566cf5f42710c5ca3bdc612dbcc330c57333577L-1","lines": [{"line": "// set up rate limiter: maximum of five requests per minute\n","lineNumber": 7,"lineChange": "added"},{"line": "const RateLimit = require('express-rate-limit');\n","lineNumber": 8,"lineChange": "added"},{"line": "const limiter = RateLimit({\n","lineNumber": 9,"lineChange": "added"},{"line": "  windowMs: 1 * 60 * 1000, // 1 minute\n","lineNumber": 10,"lineChange": "added"},{"line": "  max: 5\n","lineNumber": 11,"lineChange": "added"},{"line": "});\n","lineNumber": 12,"lineChange": "added"},{"line": "\n","lineNumber": 13,"lineChange": "added"},{"line": "const app = express();\n","lineNumber": 14,"lineChange": "none"},{"line": "const port = process.env.PORT || 3000;\n","lineNumber": 15,"lineChange": "none"},{"line": "\n","lineNumber": 16,"lineChange": "none"},{"line": "app.use(express.static(__dirname));\n","lineNumber": 10,"lineChange": "removed"},{"line": "// apply rate limiter to all requests\n","lineNumber": 17,"lineChange": "added"},{"line": "app.use(limiter);\n","lineNumber": 18,"lineChange": "added"},{"line": "\n","lineNumber": 19,"lineChange": "added"},{"line": "app.use ('/dist',express.static(__dirname + '/dist/'));\n","lineNumber": 20,"lineChange": "added"},{"line": "\n","lineNumber": 21,"lineChange": "added"},{"line": "app.use ('/assets',express.static(__dirname + '/assets/'));\n","lineNumber": 22,"lineChange": "added"},{"line": "\n","lineNumber": 23,"lineChange": "added"},{"line": "app.use ('/src/translations',express.static(__dirname + '/src/translations'));\n","lineNumber": 24,"lineChange": "added"},{"line": "\n","lineNumber": 25,"lineChange": "none"},{"line": "app.get('/', (req, res) => {\n","lineNumber": 26,"lineChange": "none"},{"line": "  res.send(`Welcome to the static localizer. Navigate to /example`);\n","lineNumber": 27,"lineChange": "none"},{"line": "});\n","lineNumber": 28,"lineChange": "none"},{"line": "\n","lineNumber": 29,"lineChange": "none"},{"line": "app.get('/example', (req, res) => {\n","lineNumber": 30,"lineChange": "none"}]},{"commitURL": "https://github.com/natsukagami/themis-web-interface/commit/e1ef34f8b95e7eefab54c204b78fbdee70169a6d?diff=split#diff-cd0e12b228a7dea99a7346adf68cfc7a6a2c321846cc8a90fc6cd92cf8066d5eL-1","lines": [{"line": "router.post('/', (req, res, next) => {\n","lineNumber": 8,"lineChange": "removed"},{"line": "const rateLimiter = require('../controls/rate-limiter')({\n","lineNumber": 8,"lineChange": "added"},{"line": "\t// Allow 3 submits, then slows down\n","lineNumber": 9,"lineChange": "added"},{"line": "\tfreeRetries: 30,\n","lineNumber": 10,"lineChange": "added"},{"line": "\tminWait: 2 * 60 * 60,\n","lineNumber": 11,"lineChange": "added"},{"line": "\tmaxWait: 2 * 60 * 60,\n","lineNumber": 12,"lineChange": "added"},{"line": "\tlifetime: 60 * 60\n","lineNumber": 13,"lineChange": "added"},{"line": "});\n","lineNumber": 14,"lineChange": "added"},{"line": "\n","lineNumber": 15,"lineChange": "added"},{"line": "router.post('/', rateLimiter.prevent, (req, res, next) => {\n","lineNumber": 16,"lineChange": "added"}]},{"commitURL": "https://github.com/Waifu-pics/waifu-api/commit/da0d3b4ee8dd4e2ab0a789dfd04cb304a537368e?diff=split#diff-0eddd48e85f4f98a238d49bfe0b4cf514b1430322bcdc196b1a97786e0ec30c8L-1","lines": [{"line": "const rateLimit = require(\"express-rate-limit\")\n","lineNumber": 4,"lineChange": "added"},{"line": "\n","lineNumber": 5,"lineChange": "none"},{"line": "module.exports = ({ db, app, config, s3 }) => {\n","lineNumber": 6,"lineChange": "none"},{"line": "\n","lineNumber": 7,"lineChange": "added"},{"line": "    // Checking if user is Admin to prevent rate limit middleware\n","lineNumber": 8,"lineChange": "added"},{"line": "    const chkAdmin = async (req, res, next) => {\n","lineNumber": 9,"lineChange": "added"},{"line": "        const { token } = req.headers\n","lineNumber": 10,"lineChange": "added"},{"line": "        const Admins = db.collection('admins')\n","lineNumber": 11,"lineChange": "added"},{"line": "        req.chkAdmin = Boolean(req.headers.token && typeof token === \"string\" && Boolean(await Admins.findOne({token})))\n","lineNumber": 12,"lineChange": "added"},{"line": "        \n","lineNumber": 13,"lineChange": "added"},{"line": "        next()\n","lineNumber": 14,"lineChange": "added"},{"line": "    }\n","lineNumber": 15,"lineChange": "added"},{"line": "\n","lineNumber": 16,"lineChange": "added"},{"line": "    // Rate limit middleware\n","lineNumber": 17,"lineChange": "added"},{"line": "    const limiter = rateLimit({\n","lineNumber": 18,"lineChange": "added"},{"line": "        windowMs: 10 * 60 * 1000, // 10 minutes\n","lineNumber": 19,"lineChange": "added"},{"line": "        max: 15,\n","lineNumber": 20,"lineChange": "added"},{"line": "        message: \"You can only upload 15 files per 10 minutes!\",\n","lineNumber": 21,"lineChange": "added"},{"line": "        statusCode: 400,\n","lineNumber": 22,"lineChange": "added"},{"line": "        skip: function (req) {\n","lineNumber": 23,"lineChange": "added"},{"line": "            return req.chkAdmin\n","lineNumber": 24,"lineChange": "added"},{"line": "        }\n","lineNumber": 25,"lineChange": "added"},{"line": "    })\n","lineNumber": 26,"lineChange": "added"},{"line": "\n","lineNumber": 27,"lineChange": "added"},{"line": "    // Do shit to upload\n","lineNumber": 28,"lineChange": "added"},{"line": "    app.use(\"/api/upload\", chkAdmin, limiter)\n","lineNumber": 29,"lineChange": "added"},{"line": "\n","lineNumber": 30,"lineChange": "added"},{"line": "    app.use(fileUpload({\n","lineNumber": 31,"lineChange": "none"},{"line": "        limits: { fileSize: config.maxUploadSize * 1024 * 1024 },\n","lineNumber": 32,"lineChange": "none"},{"line": "        abortOnLimit: true,\n","lineNumber": 33,"lineChange": "none"},{"line": "        createParentPath: true\n","lineNumber": 34,"lineChange": "none"},{"line": "    }))\n","lineNumber": 35,"lineChange": "none"},{"line": "\n","lineNumber": 36,"lineChange": "none"},{"line": "    app.post('/api/upload', async (req, res) => {\n","lineNumber": 37,"lineChange": "none"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 37,"cwe": ["CWE-770"]}},{"id": "javascript/PrototypePollution","name": "PrototypePollution","shortDescription": {"text": "Prototype Pollution"},"defaultConfiguration": {"level": "warning"},"help": {"markdown": "## Details\n\nPrototype Pollution is a vulnerability affecting JavaScript. Prototype Pollution refers to the ability to inject properties into existing JavaScript language construct prototypes, such as objects. JavaScript allows all Object attributes to be altered, including their magical attributes such as `_proto_`, `constructor` and `prototype`. An attacker manipulates these attributes to overwrite, or pollute, a JavaScript application object prototype of the base object by injecting other values.  Properties on the `Object.prototype` are then inherited by all the JavaScript objects through the prototype chain. When that happens, this leads to either denial of service by triggering JavaScript exceptions, or it tampers with the application source code to force the code path that the attacker injects, thereby leading to remote code execution.\n\nThere are two main ways in which the pollution of prototypes occurs:\n\n-   Unsafe `Object` recursive merge\n\n-   Property definition by path\n\n\n### Unsafe Object recursive merge\n\nThe logic of a vulnerable recursive merge function follows the following high-level model:\n```\nmerge (target, source)\n\n  foreach property of source\n\n    if property exists and is an object on both the target and the source\n\n      merge(target[property], source[property])\n\n    else\n\n      target[property] = source[property]\n```\n<br>\n\nWhen the source object contains a property named `_proto_` defined with `Object.defineProperty()` , the condition that checks if the property exists and is an object on both the target and the source passes and the merge recurses with the target, being the prototype of `Object` and the source of `Object` as defined by the attacker. Properties are then copied on the `Object` prototype.\n\nClone operations are a special sub-class of unsafe recursive merges, which occur when a recursive merge is conducted on an empty object: `merge({},source)`.\n\n`lodash` and `Hoek` are examples of libraries susceptible to recursive merge attacks.\n\n### Property definition by path\n\nThere are a few JavaScript libraries that use an API to define property values on an object based on a given path. The function that is generally affected contains this signature: `theFunction(object, path, value)`\n\nIf the attacker can control the value of \"path\", they can set this value to `_proto_.myValue`. `myValue` is then assigned to the prototype of the class of the object.\n\n## Types of attacks\n\nThere are a few methods by which Prototype Pollution can be manipulated:\n\n| Type |Origin  |Short description |\n|--|--|--|\n| **Denial of service (DoS)**|Client  |This is the most likely attack. <br>DoS occurs when `Object` holds generic functions that are implicitly called for various operations (for example, `toString` and `valueOf`). <br> The attacker pollutes `Object.prototype.someattr` and alters its state to an unexpected value such as `Int` or `Object`. In this case, the code fails and is likely to cause a denial of service.  <br>**For example:** if an attacker pollutes `Object.prototype.toString` by defining it as an integer, if the codebase at any point was reliant on `someobject.toString()` it would fail. |\n |**Remote Code Execution**|Client|Remote code execution is generally only possible in cases where the codebase evaluates a specific attribute of an object, and then executes that evaluation.<br>**For example:** `eval(someobject.someattr)`. In this case, if the attacker pollutes `Object.prototype.someattr` they are likely to be able to leverage this in order to execute code.|\n|**Property Injection**|Client|The attacker pollutes properties that the codebase relies on for their informative value, including security properties such as cookies or tokens.<br>  **For example:** if a codebase checks privileges for `someuser.isAdmin`, then when the attacker pollutes `Object.prototype.isAdmin` and sets it to equal `true`, they can then achieve admin privileges.|\n\n## Affected environments\n\nThe following environments are susceptible to a Prototype Pollution attack:\n\n-   Application server\n\n-   Web server\n\n\n## Best practices for prevention\n\n1.  Freeze the prototype - use `Object.freeze (Object.prototype)`.\n\n2.  Require schema validation of JSON input.\n\n3.  Avoid using unsafe recursive merge functions.\n\n4.  Consider using objects without prototypes (for example, `Object.create(null)`), breaking the prototype chain and preventing pollution.\n\n5.  As a best practice use `Map` instead of `Object`.\n\n### For more information on this vulnerability type:\n\n[Arteau, Oliver. \"JavaScript prototype pollution attack in NodeJS application.\" GitHub, 26 May 2018](https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf)","text": ""},"properties": {"tags": ["javascript","PrototypePollution","Security","SourceNonServer","SourceResourceAccess","SourceStackTrace","Taint"],"categories": ["Security"],"exampleCommitFixes": [{"commitURL": "https://github.com/wachunga/omega/commit/0ea594b103c957680b02e5b3d3e6763cf49d2c3a?diff=split#diff-a4c65ede64197e1a112899a68bf994485b889c4b143198bac4af53425b38406fL-1","lines": [{"line": "issues[id].assignee = assignee; \n","lineNumber": 47,"lineChange": "removed"},{"line": "issues[id-1].assignee = assignee; \n","lineNumber": 47,"lineChange": "added"}]},{"commitURL": "https://github.com/VincentLoy/tweetParser.js/commit/31ccbf365abbb6398fb78705074c11458421cec6?diff=split#diff-343e9403c50c367c18f841170513c764a80c01c26a0d9c2746a5fd632febe770L-1","lines": [{"line": "        for (var i in datas) {\n","lineNumber": 18,"lineChange": "removed"},{"line": "        var i;\n","lineNumber": 18,"lineChange": "added"},{"line": "\n","lineNumber": 19,"lineChange": "added"},{"line": "        for (i = 0; i < datas.length; i += 1) {\n","lineNumber": 20,"lineChange": "added"},{"line": "            if (datas[i].contributions > 1) {\n","lineNumber": 21,"lineChange": "none"},{"line": "                datas[i].wording = \"contributions\";\n","lineNumber": 22,"lineChange": "none"}]},{"commitURL": "https://github.com/form-data/form-data/commit/16077142f975183ba8e3155c499dd6ac5b24a4a0?diff=split#diff-a0216776b159a7c9f71dd2ea85c1406d1f8aab69404773954af176b6db7897bbL-1","lines": [{"line": "    if (!FIELDS.hasOwnProperty(name)) { continue; }\n","lineNumber": 65,"lineChange": "added"},{"line": "\n","lineNumber": 66,"lineChange": "added"},{"line": "    field = FIELDS[name];\n","lineNumber": 67,"lineChange": "none"}]}],"exampleCommitDescriptions": [],"precision": "very-high","repoDatasetSize": 32,"cwe": ["CWE-1321"]}}]}},"results": [{"ruleId": "javascript/HardcodedNonCryptoSecret","ruleIndex": 0,"level": "error","message": {"text":"Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.","markdown":"Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.","arguments": ["[a hardcoded string](0)","[here](1)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":134,  "endLine":134,  "startColumn":9,  "endColumn":15}  }}],"fingerprints": {"0": "47c64895e6e7539f758b43c50cd3f8577b6fb743add254a2030e2d11d0599801","1": "6f75d442.3f481afb.e3ab951f.e052b9a9.79a7d027.8020cfdf.7a8c7288.e0f43150.6f75d442.00249721.c0e0a62c.c8688b2b.79a7d027.8020cfdf.ce654519.517e8978"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":134,  "endLine":134,  "startColumn":48,  "endColumn":66}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":134,  "endLine":134,  "startColumn":9,  "endColumn":15}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 838,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "javascript/HardcodedNonCryptoSecret","ruleIndex": 0,"level": "error","message": {"text":"Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.","markdown":"Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.","arguments": ["[a hardcoded string](0)","[here](1)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":140,  "endLine":140,  "startColumn":9,  "endColumn":15}  }}],"fingerprints": {"1": "03562a32.3f481afb.7aa4b3d8.f4e0acbb.79a7d027.4bc2ac36.6637e023.b3e40b6b.6e3f6a92.3f481afb.a69344ae.c8688b2b.79a7d027.4bc2ac36.c3879700.b3e40b6b","0": "da8453b9ea5393971b26c9daa1a39e0a6764a802f18c1e33dd6b19591bb4100e"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":140,  "endLine":140,  "startColumn":45,  "endColumn":60}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":140,  "endLine":140,  "startColumn":9,  "endColumn":15}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 838,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "javascript/HardcodedNonCryptoSecret","ruleIndex": 0,"level": "error","message": {"text":"Avoid hardcoding values that are meant to be secret. Found a hardcoded string used in here.","markdown":"Avoid hardcoding values that are meant to be secret. Found {0} used in {1}.","arguments": ["[a hardcoded string](0)","[here](1)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":146,  "endLine":146,  "startColumn":9,  "endColumn":15}  }}],"fingerprints": {"0": "5cd8d818ea60b4688a089f1debb79af330772ba382f93669834a3ed669fa4ace","1": "060d4212.7499751a.7aa4b3d8.e052b9a9.79a7d027.8020cfdf.3d28c76d.7e7a1fb3.060d4212.7499751a.a69344ae.c8688b2b.79a7d027.8020cfdf.3d28c76d.7e7a1fb3"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":146,  "endLine":146,  "startColumn":48,  "endColumn":66}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":146,  "endLine":146,  "startColumn":9,  "endColumn":15}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 838,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "javascript/HttpToHttps","ruleIndex": 1,"level": "warning","message": {"text":"http.createServer uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.","markdown":"{0} uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.","arguments": ["[http.createServer](0)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/index.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":46,  "endLine":46,  "startColumn":19,  "endColumn":31}  }}],"fingerprints": {"1": "7cc5e399.b6e32c83.607187b5.a517c54b.9997f84d.6f0d36d4.cd61fc56.91c60b7d.9ff0579e.b6e32c83.d685e3e1.a517c54b.2746d86d.5fce695c.cd61fc56.89d75565","0": "a58c557709471598c4f6f327d9e6fb3533162e7418a9988d58efee7c5cc03cd6"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/index.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":46,  "endLine":46,  "startColumn":19,  "endColumn":31}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 513,"priorityScoreFactors": [  {"label": true,"type": "hotFileCodeFlow"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "javascript/InsecureCipherNoIntegrity","ruleIndex": 2,"level": "warning","message": {"text":"Cipher Block Chaining mode (used in crypto.default.createCipheriv) does not provide integrity. Consider using  Galois/Counter mode.","markdown":"{0} mode (used in {1}) does not provide integrity. Consider using  Galois/Counter mode.","arguments": ["[Cipher Block Chaining](0)","[crypto.default.createCipheriv](1)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/config/env-config.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":439,  "endLine":439,  "startColumn":29,  "endColumn":43}  }}],"fingerprints": {"0": "e47f4e6262dbddfb7423d26d72b93b11a25f3bbc40b1610af9f3c25ae37a2c60","1": "37bc1bfe.4bbe55b4.191eaf2b.8f3c2a81.ef9f7d82.8020cfdf.ea4b1c47.71520ffe.7cc1dafa.4bbe55b4.191eaf2b.8f3c2a81.ef9f7d82.8020cfdf.ea4b1c47.71520ffe"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/config/env-config.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":437,  "endLine":437,  "startColumn":61,  "endColumn":74}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/config/env-config.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":439,  "endLine":439,  "startColumn":29,  "endColumn":43}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 575,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "javascript/InsecureCipherNoIntegrity","ruleIndex": 2,"level": "warning","message": {"text":"Cipher Block Chaining mode (used in crypto.default.createDecipheriv) does not provide integrity. Consider using  Galois/Counter mode.","markdown":"{0} mode (used in {1}) does not provide integrity. Consider using  Galois/Counter mode.","arguments": ["[Cipher Block Chaining](0)","[crypto.default.createDecipheriv](1)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/config/env-config.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":462,  "endLine":462,  "startColumn":31,  "endColumn":47}  }}],"fingerprints": {"0": "855f9612fd134b219944d263512e0e24db443eb8c294c473d67b850e1166c10c","1": "9302ffdf.4773f344.191eaf2b.d7919eeb.ac82cb7b.8020cfdf.ea4b1c47.71520ffe.9302ffdf.4bbe55b4.191eaf2b.8f3c2a81.ac82cb7b.5fce695c.dc3ca176.71520ffe"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/config/env-config.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":459,  "endLine":459,  "startColumn":61,  "endColumn":74}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/config/env-config.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":462,  "endLine":462,  "startColumn":31,  "endColumn":47}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 575,"priorityScoreFactors": [  {"label": true,"type": "multipleOccurrence"  },  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "javascript/NoRateLimitingForExpensiveWebOperation","ruleIndex": 3,"level": "warning","message": {"text":"Expensive operation (a file system operation) is performed by an endpoint handler which does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.","markdown":"Expensive operation ({0}) is performed by {1} which does not use a rate-limiting mechanism. It may enable the attackers to perform Denial-of-service attacks. Consider using a rate-limiting middleware such as express-limit.","arguments": ["[a file system operation](0)","[an endpoint handler](1)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/frontend/routes.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":28,  "endLine":30,  "startColumn":17,  "endColumn":2}  }}],"fingerprints": {"0": "5bc01d102a500d83247c9ed5bd930bd8da39652f2981a62c4ed3aad52911a73f","1": "92e26ef2.a17c4800.607187b5.c559ebce.fd1fa73f.5fce695c.83265159.89d75565.14aab1c5.a17c4800.d9fd6cba.c559ebce.ce11b2ec.5fce695c.83265159.89d75565"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/frontend/routes.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":29,  "endLine":29,  "startColumn":7,  "endColumn":15}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/frontend/routes.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":28,  "endLine":30,  "startColumn":17,  "endColumn":2}}}}]}]}],"properties": {"isAutofixable": true,"priorityScore": 513,"priorityScoreFactors": [  {"label": true,"type": "hotFileCodeFlow"  },  {"label": true,"type": "fixExamples"  }]}},{"ruleId": "javascript/PrototypePollution","ruleIndex": 4,"level": "warning","message": {"text":"Unsanitized input from an exception flows into a member access and is used to access a property of this object by name. This may allow a malicious user to pollute the Object.prototype and cause a crash, remote code execution or logic bypasses.","markdown":"Unsanitized input from {0} {1} into a member access and is used to access a property of {2} by name. This may allow a malicious user to pollute the Object.prototype and cause a crash, remote code execution or logic bypasses.","arguments": ["[an exception](0)","[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24)","[this object](25)"]},"locations": [{  "id": 0,  "physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":1141,  "endLine":1141,  "startColumn":29,  "endColumn":73}  }}],"fingerprints": {"0": "685ac3845541152d41416c178871f24db4f95e5af379a3f16fa849433ec54c19","1": "17b7ceda.883ce888.8b18f948.d7919eeb.ef9f7d82.8020cfdf.83265159.d28377a2.51bd987d.664e3b30.97923ac6.3eda1150.601e4ccc.bd8afff9.f0256597.6723ddeb"},"codeFlows": [{"threadFlows": [{"locations": [{"location": {"id": 0,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":390,  "endLine":390,  "startColumn":34,  "endColumn":41}}}},{"location": {"id": 1,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":390,  "endLine":390,  "startColumn":34,  "endColumn":41}}}},{"location": {"id": 2,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":390,  "endLine":390,  "startColumn":28,  "endColumn":41}}}},{"location": {"id": 3,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":390,  "endLine":390,  "startColumn":11,  "endColumn":26}}}},{"location": {"id": 4,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":385,  "endLine":391,  "startColumn":33,  "endColumn":10}}}},{"location": {"id": 5,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":385,  "endLine":385,  "startColumn":15,  "endColumn":30}}}},{"location": {"id": 6,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":393,  "endLine":393,  "startColumn":33,  "endColumn":48}}}},{"location": {"id": 7,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":393,  "endLine":393,  "startColumn":9,  "endColumn":27}}}},{"location": {"id": 8,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":399,  "endLine":399,  "startColumn":7,  "endColumn":25}}}},{"location": {"id": 9,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":397,  "endLine":401,  "startColumn":12,  "endColumn":6}}}},{"location": {"id": 10,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":332,  "endLine":402,  "startColumn":28,  "endColumn":5}}}},{"location": {"id": 11,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":234,  "endLine":234,  "startColumn":13,  "endColumn":37}}}},{"location": {"id": 12,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":233,  "endLine":233,  "startColumn":11,  "endColumn":29}}}},{"location": {"id": 13,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":247,  "endLine":247,  "startColumn":56,  "endColumn":74}}}},{"location": {"id": 14,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":247,  "endLine":247,  "startColumn":45,  "endColumn":55}}}},{"location": {"id": 15,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":247,  "endLine":247,  "startColumn":37,  "endColumn":55}}}},{"location": {"id": 16,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":247,  "endLine":247,  "startColumn":31,  "endColumn":75}}}},{"location": {"id": 17,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":256,  "endLine":256,  "startColumn":32,  "endColumn":38}}}},{"location": {"id": 18,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":258,  "endLine":258,  "startColumn":59,  "endColumn":65}}}},{"location": {"id": 19,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":258,  "endLine":258,  "startColumn":66,  "endColumn":71}}}},{"location": {"id": 20,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":258,  "endLine":258,  "startColumn":17,  "endColumn":56}}}},{"location": {"id": 21,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":258,  "endLine":258,  "startColumn":19,  "endColumn":27}}}},{"location": {"id": 22,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":275,  "endLine":275,  "startColumn":46,  "endColumn":54}}}},{"location": {"id": 23,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":1139,  "endLine":1139,  "startColumn":33,  "endColumn":41}}}},{"location": {"id": 24,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":1141,  "endLine":1141,  "startColumn":64,  "endColumn":72}}}},{"location": {"id": 25,"physicalLocation": {"artifactLocation": {  "uri": "src/swarms/enrichment.js",  "uriBaseId": "%SRCROOT%"},"region": {  "startLine":1141,  "endLine":1141,  "startColumn":29,  "endColumn":73}}}}]}]}],"properties": {"isAutofixable": false,"priorityScore": 563,"priorityScoreFactors": [  {"label": true,"type": "hotFileSource"  },  {"label": true,"type": "fixExamples"  }]}}],"properties": {"coverage": [{"files": 1,"isSupported": true,"lang": "HTML","type": "SUPPORTED"},{"files": 33,"isSupported": true,"lang": "JavaScript","type": "SUPPORTED"},{"files": 1,"isSupported": true,"lang": "TypeScript","type": "SUPPORTED"}]}}]}