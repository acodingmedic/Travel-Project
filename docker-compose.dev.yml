version: '3.8'

services:
  # TravelAI Development Application
  travelai-app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: travelai-app-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "8000:8000"
      - "9229:9229"  # Node.js debugger port
    environment:
      - NODE_ENV=development
      - PORT=8000
      - FRONTEND_PORT=3000
      - MONGODB_URI=mongodb://mongodb-dev:27017/travelai_dev
      - REDIS_URL=redis://redis-dev:6379
      - SESSION_SECRET=dev-session-secret
      - JWT_SECRET=dev-jwt-secret
      - DEBUG=travelai:*
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - mongodb-dev
      - redis-dev
    networks:
      - travelai-dev-network
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    command: npm run dev
    stdin_open: true
    tty: true

  # MongoDB Development Database
  mongodb-dev:
    image: mongo:6.0-focal
    container_name: travelai-mongodb-dev
    restart: unless-stopped
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=dev
      - MONGO_INITDB_ROOT_PASSWORD=dev123
      - MONGO_INITDB_DATABASE=travelai_dev
    volumes:
      - mongodb_dev_data:/data/db
      - ./scripts/mongo-init-dev.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - travelai-dev-network

  # Redis Development Cache
  redis-dev:
    image: redis:7-alpine
    container_name: travelai-redis-dev
    restart: unless-stopped
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    networks:
      - travelai-dev-network

  # MongoDB Express for Database Management
  mongo-express:
    image: mongo-express:latest
    container_name: travelai-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=dev
      - ME_CONFIG_MONGODB_ADMINPASSWORD=dev123
      - ME_CONFIG_MONGODB_URL=mongodb://dev:dev123@mongodb-dev:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin123
    depends_on:
      - mongodb-dev
    networks:
      - travelai-dev-network

  # Redis Commander for Cache Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: travelai-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis-dev:6379
    depends_on:
      - redis-dev
    networks:
      - travelai-dev-network

  # MailHog for Email Testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: travelai-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - travelai-dev-network

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: travelai-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - travelai-dev-network

  # Prometheus for Development Monitoring
  prometheus-dev:
    image: prom/prometheus:latest
    container_name: travelai-prometheus-dev
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=24h'
      - '--web.enable-lifecycle'
    networks:
      - travelai-dev-network

  # Grafana for Development Dashboards
  grafana-dev:
    image: grafana/grafana:latest
    container_name: travelai-grafana-dev
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=dev
      - GF_SECURITY_ADMIN_PASSWORD=dev123
      - GF_USERS_ALLOW_SIGN_UP=true
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning-dev:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus-dev
    networks:
      - travelai-dev-network

  # Nginx for Development Reverse Proxy
  nginx-dev:
    image: nginx:alpine
    container_name: travelai-nginx-dev
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx-dev.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - travelai-app-dev
    networks:
      - travelai-dev-network

  # Storybook for Component Development
  storybook:
    build:
      context: .
      dockerfile: Dockerfile.storybook
    container_name: travelai-storybook
    restart: unless-stopped
    ports:
      - "6006:6006"
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - travelai-dev-network
    command: npm run storybook

  # Documentation Server
  docs:
    image: nginx:alpine
    container_name: travelai-docs
    restart: unless-stopped
    ports:
      - "8083:80"
    volumes:
      - ./docs:/usr/share/nginx/html:ro
      - ./nginx/docs.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - travelai-dev-network

networks:
  travelai-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  mongodb_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local